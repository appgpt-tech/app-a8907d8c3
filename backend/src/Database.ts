//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { usersEntity } from './db/users.entity';
import { departmentsEntity } from './db/departments.entity';
import { initiativesEntity } from './db/initiatives.entity';
import { goalsEntity } from './db/goals.entity';
import { emissionSourcesEntity } from './db/emissionSources.entity';
import { resourceUsageEntity } from './db/resourceUsage.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      departmentsEntity,
      initiativesEntity,
      goalsEntity,
      emissionSourcesEntity,
      resourceUsageEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        {
          userName: 'userName 1',
          department: 1,
          password: 'password 1',
          email: 'email 1',
          id: 99,
        },
        {
          userName: 'userName 2',
          department: 2,
          password: 'password 2',
          email: 'email 2',
          id: 8,
        },
        {
          userName: 'userName 3',
          department: 3,
          password: 'password 3',
          email: 'email 3',
          id: 31,
        },
        {
          userName: 'userName 4',
          department: 4,
          password: 'password 4',
          email: 'email 4',
          id: 59,
        },
        {
          userName: 'userName 5',
          department: 5,
          password: 'password 5',
          email: 'email 5',
          id: 71,
        },
      ],
      departments: [
        { departmentName: 'departmentName 1', departmentHead: 1, id: 25 },
        { departmentName: 'departmentName 2', departmentHead: 2, id: 30 },
        { departmentName: 'departmentName 3', departmentHead: 3, id: 60 },
        { departmentName: 'departmentName 4', departmentHead: 4, id: 71 },
        { departmentName: 'departmentName 5', departmentHead: 5, id: 35 },
      ],
      initiatives: [
        {
          name: 'name 1',
          description: 'description 1',
          startDate: '2023-06-10T10:04:11.877Z',
          endDate: '2023-10-21T14:56:26.185Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 82,
        },
        {
          name: 'name 2',
          description: 'description 2',
          startDate: '2024-10-28T06:19:51.903Z',
          endDate: '2025-01-17T17:44:46.578Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 61,
        },
        {
          name: 'name 3',
          description: 'description 3',
          startDate: '2024-01-19T00:07:28.323Z',
          endDate: '2024-12-27T02:17:14.633Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 38,
        },
        {
          name: 'name 4',
          description: 'description 4',
          startDate: '2024-11-20T23:44:59.819Z',
          endDate: '2024-10-14T08:19:44.101Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 96,
        },
        {
          name: 'name 5',
          description: 'description 5',
          startDate: '2024-03-29T04:47:18.994Z',
          endDate: '2025-02-25T21:08:47.281Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 45,
        },
      ],
      goals: [
        {
          name: 'name 1',
          description: 'description 1',
          targetDate: '2024-04-23T06:05:50.720Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 1,
        },
        {
          name: 'name 2',
          description: 'description 2',
          targetDate: '2023-08-25T11:13:51.209Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 44,
        },
        {
          name: 'name 3',
          description: 'description 3',
          targetDate: '2024-07-31T06:32:24.647Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 56,
        },
        {
          name: 'name 4',
          description: 'description 4',
          targetDate: '2023-08-04T08:22:46.412Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 46,
        },
        {
          name: 'name 5',
          description: 'description 5',
          targetDate: '2023-07-15T14:38:16.400Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 80,
        },
      ],
      emissionSources: [
        {
          sourceType: 'sourceType 1',
          quantityUsed: 1,
          emissionFactors: 0.15,
          totalEmissions: 0.07,
          id: 20,
        },
        {
          sourceType: 'sourceType 2',
          quantityUsed: 0.91,
          emissionFactors: 0.87,
          totalEmissions: 0.77,
          id: 61,
        },
        {
          sourceType: 'sourceType 3',
          quantityUsed: 0.66,
          emissionFactors: 0.96,
          totalEmissions: 0.24,
          id: 90,
        },
        {
          sourceType: 'sourceType 4',
          quantityUsed: 0.49,
          emissionFactors: 0.76,
          totalEmissions: 0.18,
          id: 26,
        },
        {
          sourceType: 'sourceType 5',
          quantityUsed: 0.77,
          emissionFactors: 0.63,
          totalEmissions: 0.52,
          id: 9,
        },
      ],
      resourceUsage: [
        {
          resourceType: 'resourceType 1',
          quantityConsumed: 0.47,
          unitOfMeasurement: 'unitOfMeasurement 1',
          periodOfConsumption: '2024-12-31T07:17:59.011Z',
          id: 25,
        },
        {
          resourceType: 'resourceType 2',
          quantityConsumed: 0.2,
          unitOfMeasurement: 'unitOfMeasurement 2',
          periodOfConsumption: '2024-05-27T06:17:21.469Z',
          id: 43,
        },
        {
          resourceType: 'resourceType 3',
          quantityConsumed: 0.16,
          unitOfMeasurement: 'unitOfMeasurement 3',
          periodOfConsumption: '2024-12-12T10:17:20.146Z',
          id: 96,
        },
        {
          resourceType: 'resourceType 4',
          quantityConsumed: 0.41,
          unitOfMeasurement: 'unitOfMeasurement 4',
          periodOfConsumption: '2024-12-26T23:09:28.699Z',
          id: 4,
        },
        {
          resourceType: 'resourceType 5',
          quantityConsumed: 0.97,
          unitOfMeasurement: 'unitOfMeasurement 5',
          periodOfConsumption: '2023-11-22T05:32:02.329Z',
          id: 64,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('departmentsEntity', data.departments);
      await this.SeedResource('initiativesEntity', data.initiatives);
      await this.SeedResource('goalsEntity', data.goals);
      await this.SeedResource('emissionSourcesEntity', data.emissionSources);
      await this.SeedResource('resourceUsageEntity', data.resourceUsage);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
